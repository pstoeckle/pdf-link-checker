stages:
- pre-analysis
- test
- package
- deploy

cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
        - ".venv"

image: gitlab.lrz.de:5005/i4/software/docker-images/python3.9-poetry

python:quality:
    artifacts:
        reports:
            codequality: flake8.json
            cobertura: cobertura.xml
            junit: mypy.xml
        expire_in: 10 days
    coverage: '/line-rate="0.([0-9]{1,2})\d*"/'
    needs: [ ]
    rules: &python-rules
        -   changes:
                - "pdf_link_checker/**.py"
                - .gitlab-ci.yml
        -   if: '$CI_COMMIT_BRANCH == "main"'
        -   if: '$CI_COMMIT_BRANCH == "development"'
        -   if: '$CI_COMMIT_TAG'
    script:
        - poetry install
        - poetry run mypy --cobertura-xml-report=. --junit-xml=mypy.xml --pretty pdf_link_checker
        - head -n 1 cobertura.xml
    stage: pre-analysis

python:test:
    artifacts:
        reports:
            cobertura: coverage.xml
            junit: report.xml
        expire_in: 10 days
    coverage: '/line-rate="0.([0-9]{1,2})\d*"/'
    needs:
        - python:quality
    rules: *python-rules
    script:
        - poetry install
        - poetry run pytest --junitxml report.xml --cov=pdf_link_checker --cov-report xml ./tests
        - head -n 2 coverage.xml >> t.txt
        - tail -n 1 t.txt >> s.txt
        - cat s.txt
    stage: test

python:package:
    artifacts:
        paths:
            - dist
        expire_in: 3 days
    needs:
        - python:test
    rules: *python-rules
    script:
        - poetry install --no-dev
        - poetry build
    stage: package

python:deploy:
    rules:
    -   if: '$CI_COMMIT_TAG'
    script:
        - poetry config repositories.lrz https://gitlab.lrz.de/api/v4/projects/${CI_PROJECT_ID}/packages/pypi
        - poetry publish --repository lrz --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD
    stage: deploy
    needs:
        - python:package

docker:deploy:
    stage: deploy
    image: docker:stable
    services:
        - docker:18-dind
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker pull $IMAGE_NAME:latest || true
        - docker build 
            --build-arg=COMMIT=$CI_COMMIT_SHA  
            --build-arg=BRANCH=$CI_COMMIT_BRANCH 
            --build-arg=COMMIT_SHORT=$CI_COMMIT_SHORT_SHA
            --build-arg=TAG=$CI_COMMIT_TAG 
            --tag $IMAGE_NAME:$CI_COMMIT_SHA 
            --tag $IMAGE_NAME:latest 
            --tag $IMAGE_NAME:$CI_COMMIT_SHORT_SHA 
            --tag $IMAGE_NAME:$CI_COMMIT_REF_NAME 
            .
        - docker push $IMAGE_NAME
    tags:
        - docker
        - privileged
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_HOST: tcp://docker:2375
        IMAGE_NAME: $CI_REGISTRY_IMAGE
    rules:
        -   if: '$CI_COMMIT_TAG'
    needs:
        - python:package
