# SPDX-FileCopyrightText: 2023 Siemens AG, Patrick Stoeckle, and other contributors.
# SPDX-License-Identifier: LicenseRef-Siemens-ISL-1.4

# General CI/CD configuration: Start
stages:
  - static-tests
  - dynamic-tests
  - package
  - deploy
  - post-deploy-tests

before_script:
  # HTTP proxy
  - |-
    export http_proxy="$CODE_PROXY"
    export https_proxy="$CODE_PROXY"
    export no_proxy="127.0.0.1,localhost,.siemens.de,.siemens.net,.siemens.com,.siemens.io,s3.dualstack.eu-central-1.amazonaws.com"
    export HTTP_PROXY="$http_proxy"
    export HTTPS_PROXY="$http_proxy"
    export NO_PROXY="$no_proxy"
  # Tag for container image related jobs
  - export TARGET_CONTAINER_TAG="${CI_COMMIT_TAG:-${CI_COMMIT_REF_SLUG}}"
variables:
  PACKAGE_FOLDER: ./pdf_link_checker/

# General CI/CD configuration: End

# Rules: Start
.on_main: &on_main
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    when: on_success # default value

.on_tag: &on_tag
  - if: "$CI_COMMIT_TAG"
    when: on_success # default value

.on_mr: &on_mr
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: on_success # default value

.on_manual: &on_manual
  - when: manual

.on_tag_and_manual: &on_tag_and_manual
  - *on_tag
  - *on_manual

.on_standard_events: &on_standard_events
  - *on_tag
  - *on_main
  - *on_mr
# Rules: End

# Abstract Jobs: Start
.static-test-job:
  needs: []
  stage: static-tests

.container-deploy:
  rules: *on_tag_and_manual
  stage: deploy
  variables:
    DOCKERFILEPATH: .
    KANIKO_EXTRA_ARGS: ""
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir --parents /kaniko/.docker
    - >-
      /kaniko/executor
      --build-arg http_proxy
      --build-arg HTTP_PROXY
      --build-arg https_proxy
      --build-arg HTTPS_PROXY
      --build-arg no_proxy
      --build-arg NO_PROXY
      --context "$CI_PROJECT_DIR/$DOCKERFILEPATH"
      --destination "${DESTINATION}:${TARGET_CONTAINER_TAG}"
      --destination "${DESTINATION}:latest"
      --dockerfile "$CI_PROJECT_DIR/$DOCKERFILEPATH/Dockerfile"
      ${KANIKO_EXTRA_ARGS}
  needs:
    - python-package

.post-deploy-job:
  tags:
    - DOCKER
  stage: post-deploy-tests
  rules: *on_tag_and_manual
  needs:
  - manifest
# Abstract Jobs: End

# Static Test Jobs: Start
docker-lint:
  extends: .static-test-job
  image: hadolint/hadolint:latest-debian
  rules:
    - !reference [.on_standard_events]
    - changes:
        - ".gitlab-ci.yml"
        - Dockerfile
  script:
    - hadolint Dockerfile

python-static-tests:
  extends: .static-test-job
  cache: &python-cache
    key: ${CI_COMMIT_SHORT_SHA}
    paths:
      - ".venv"
  image: &python-image
    name: TODO
    # Clear entrypoint so that the script block below can be executed within the container:
    entrypoint: [""]
  coverage: '/line-rate="0.([0-9]{1,2})\d*"/'
  script:
    - poetry install
    - poetry run radon cc "${PACKAGE_FOLDER}" --show-complexity --total-average
    - poetry run radon mi "${PACKAGE_FOLDER}" --show
    - poetry run flake8 "${PACKAGE_FOLDER}"
    - poetry run black --check "${PACKAGE_FOLDER}"
    - poetry run isort --profile black --check "${PACKAGE_FOLDER}"
    - poetry run pylint "${PACKAGE_FOLDER}"
    - >-
      poetry run mypy --cobertura-xml-report=. --junit-xml=mypy.xml --pretty "${PACKAGE_FOLDER}"
      && head -n 1 cobertura.xml
  rules: &python-changes
    - !reference [.on_standard_events]
    - changes:
        - ".gitlab-ci.yml"
        - "pki_scripts/**/*.py"
        - pyproject.toml

python-sast:
  extends: .static-test-job
  cache: *python-cache
  image: *python-image
  rules: *python-changes
  script:
    - >-
      poetry install
      && poetry run bandit --recursive --confidence "${PACKAGE_FOLDER}"
# Static Test Jobs: Start

# Dynamic Test Jobs: Start
python-test:
  cache: *python-cache
  needs:
    - python-static-tests
  stage: dynamic-tests
  image: *python-image

  script:
    - poetry install --with=test
    - poetry run coverage run -m pytest --junitxml=report.xml tests/
    - poetry run coverage report
    - >-
      poetry run coverage xml
      && head -n 2 coverage.xml | tail -n 1
  rules: *python-changes
  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    when: always
    expire_in: "7 days"
# Dynamic Test Jobs: End

# Package Jobs: Start
python-package:
  artifacts:
    paths:
      - dist
    expire_in: 3 days
  needs:
    - python-test
  rules: *on_tag
  script:
    - >-
      poetry install --no-dev
      && poetry build
  stage: package
# Package Jobs: End

# Deploy Jobs: Start
python-deploy:
  cache: *python-cache
  image: *python-image
  rules: *on_tag
  script:
    - poetry config repositories.lrz https://code.siemens.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry publish --repository lrz --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD
  stage: deploy
  needs:
    - python-package

deploy-test-image:
  extends: .container-deploy
  variables:
    DOCKERFILEPATH: .
    DESTINATION: ${CI_REGISTRY_IMAGE}/ci-image
    KANIKO_EXTRA_ARGS: "--target test"

amd64:
  extends: .container-deploy
  variables:
    DESTINATION: ${CI_REGISTRY_IMAGE}/pdf-link-checker-amd64
  tags:
    - DOCKER

arm64:
  extends: .container-deploy
  variables:
    DESTINATION: ${CI_REGISTRY_IMAGE}/pdf-link-checker-arm64
  tags:
    - DOCKER-AARCH64

manifest:
  stage: deploy
  variables:
    DOCKERFILEPATH: .
    TEMPLATE: "${CI_REGISTRY_IMAGE}/pdf-link-checker-ARCHVARIANT"
    TARGET: "${CI_REGISTRY_IMAGE}/pdf-link-checker"
  image:
    entrypoint: [""]
    name: mplatform/manifest-tool:alpine
  needs:
    - amd64
    - arm64
  script:
    - >-
      for current_tag in "latest" "${TARGET_CONTAINER_TAG}" ;
      do
      manifest-tool
      --username $CI_REGISTRY_USER
      --password $CI_REGISTRY_PASSWORD
      push from-args
      --platforms linux/amd64,linux/arm64
      --template "${TEMPLATE}:${current_tag}"
      --target "${TARGET}:${current_tag}" ;
      done
  rules: *on_tag_and_manual
# Deploy Jobs: End

# Post Deploy Test Jobs: Start
container-image-dependency-scanning:
  extends: .post-deploy-job
  artifacts:
    paths:
      - junit-trivy.xml
    reports:
      junit: junit-trivy.xml
  cache:
    paths:
      - .trivycache/
  variables:
    http_proxy: $CODE_PROXY
    https_proxy: $CODE_PROXY
    no_proxy: $CODE_NO_PROXY
    TRIVY_AUTH_URL: $CI_REGISTRY
    TRIVY_USERNAME: $CI_REGISTRY_USER
    TRIVY_PASSWORD: $CI_REGISTRY_PASSWORD
    SHARED_TRIVY_ARGUMENTS: "--quiet --cache-dir .trivycache/ --no-progress"
  image:
    name: aquasec/trivy:0.43.0
    entrypoint: [""]
  script:
    - >-
      export IMAGE_TO_CHECK="${CI_REGISTRY_IMAGE}/pdf-link-checker:${TARGET_CONTAINER_TAG}"
      && echo "${IMAGE_TO_CHECK}"
    # Trivy: Generate JUnit report
    - >-
      trivy image
      ${SHARED_TRIVY_ARGUMENTS}
      --exit-code 0
      --format template
      --output junit-trivy.xml
      --template @/contrib/junit.tpl
      "${IMAGE_TO_CHECK}"
    # Trivy: HIGH
    - >-
      trivy image
      ${SHARED_TRIVY_ARGUMENTS}
      --exit-code 0
      --severity HIGH
      "${IMAGE_TO_CHECK}"
    # Trivy: CRITICAL
    - >-
      trivy image
      ${SHARED_TRIVY_ARGUMENTS}
      --exit-code 0
      --severity CRITICAL
      "${IMAGE_TO_CHECK}"
    # Trivy: Fail on unfixed
    - >-
      trivy image
      ${SHARED_TRIVY_ARGUMENTS}
      --exit-code 1
      --ignore-unfixed
      "${IMAGE_TO_CHECK}"

container-image-security-scanning:
  extends: .post-deploy-job
  variables:
    DESTINATION: ${CI_REGISTRY_IMAGE}/pki-scripts
    DOCKLE_VERSION: "0.4.11"
  image: debian:11.7
  script:
    - >-
      echo "Install curl"
      && apt-get update -qq
      && apt-get install --no-install-recommends -qqy ca-certificates curl
      && DOWNLOAD_URL="https://github.com/goodwithtech/dockle/releases/download/v${DOCKLE_VERSION}/dockle_${DOCKLE_VERSION}_Linux-64bit.deb"
      && echo "Download dockle from $DOWNLOAD_URL"
      && curl --silent --location --output dockle.deb "$DOWNLOAD_URL"
      && echo "Install dockle"
      && dpkg -i dockle.deb
      && rm dockle.deb
      && echo "Check the image with dockle"
      && dockle
      --exit-code 1
      --ignore CIS-DI-0005 `# Currently, kaniko does not support Docker Content Trust`
      --authurl $CI_REGISTRY
      --password $CI_REGISTRY_PASSWORD
      --username $CI_REGISTRY_USER
      "${DESTINATION}:${TARGET_CONTAINER_TAG}"
      && echo "Dockle did not find a problem!"
# Post Deploy Test Jobs: End
